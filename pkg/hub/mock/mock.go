// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	yamux "github.com/hashicorp/yamux"
)

// MockClusterTokenMapper is a mock of ClusterTokenMapper interface.
type MockClusterTokenMapper struct {
	ctrl     *gomock.Controller
	recorder *MockClusterTokenMapperMockRecorder
}

// MockClusterTokenMapperMockRecorder is the mock recorder for MockClusterTokenMapper.
type MockClusterTokenMapperMockRecorder struct {
	mock *MockClusterTokenMapper
}

// NewMockClusterTokenMapper creates a new mock instance.
func NewMockClusterTokenMapper(ctrl *gomock.Controller) *MockClusterTokenMapper {
	mock := &MockClusterTokenMapper{ctrl: ctrl}
	mock.recorder = &MockClusterTokenMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterTokenMapper) EXPECT() *MockClusterTokenMapperMockRecorder {
	return m.recorder
}

// MapClusterToken mocks base method.
func (m *MockClusterTokenMapper) MapClusterToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapClusterToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapClusterToken indicates an expected call of MapClusterToken.
func (mr *MockClusterTokenMapperMockRecorder) MapClusterToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapClusterToken", reflect.TypeOf((*MockClusterTokenMapper)(nil).MapClusterToken), ctx, token)
}

// MockClusterConnectHandlerCallback is a mock of ClusterConnectHandlerCallback interface.
type MockClusterConnectHandlerCallback struct {
	ctrl     *gomock.Controller
	recorder *MockClusterConnectHandlerCallbackMockRecorder
}

// MockClusterConnectHandlerCallbackMockRecorder is the mock recorder for MockClusterConnectHandlerCallback.
type MockClusterConnectHandlerCallbackMockRecorder struct {
	mock *MockClusterConnectHandlerCallback
}

// NewMockClusterConnectHandlerCallback creates a new mock instance.
func NewMockClusterConnectHandlerCallback(ctrl *gomock.Controller) *MockClusterConnectHandlerCallback {
	mock := &MockClusterConnectHandlerCallback{ctrl: ctrl}
	mock.recorder = &MockClusterConnectHandlerCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterConnectHandlerCallback) EXPECT() *MockClusterConnectHandlerCallbackMockRecorder {
	return m.recorder
}

// OnNewClusterSession mocks base method.
func (m *MockClusterConnectHandlerCallback) OnNewClusterSession(id string, sess *yamux.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewClusterSession", id, sess)
}

// OnNewClusterSession indicates an expected call of OnNewClusterSession.
func (mr *MockClusterConnectHandlerCallbackMockRecorder) OnNewClusterSession(id, sess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewClusterSession", reflect.TypeOf((*MockClusterConnectHandlerCallback)(nil).OnNewClusterSession), id, sess)
}

// MockClusterDialer is a mock of ClusterDialer interface.
type MockClusterDialer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterDialerMockRecorder
}

// MockClusterDialerMockRecorder is the mock recorder for MockClusterDialer.
type MockClusterDialerMockRecorder struct {
	mock *MockClusterDialer
}

// NewMockClusterDialer creates a new mock instance.
func NewMockClusterDialer(ctrl *gomock.Controller) *MockClusterDialer {
	mock := &MockClusterDialer{ctrl: ctrl}
	mock.recorder = &MockClusterDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterDialer) EXPECT() *MockClusterDialerMockRecorder {
	return m.recorder
}

// DialCluster mocks base method.
func (m *MockClusterDialer) DialCluster(id string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialCluster", id)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialCluster indicates an expected call of DialCluster.
func (mr *MockClusterDialerMockRecorder) DialCluster(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialCluster", reflect.TypeOf((*MockClusterDialer)(nil).DialCluster), id)
}
