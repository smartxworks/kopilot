// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClusterSession is a mock of ClusterSession interface.
type MockClusterSession struct {
	ctrl     *gomock.Controller
	recorder *MockClusterSessionMockRecorder
}

// MockClusterSessionMockRecorder is the mock recorder for MockClusterSession.
type MockClusterSessionMockRecorder struct {
	mock *MockClusterSession
}

// NewMockClusterSession creates a new mock instance.
func NewMockClusterSession(ctrl *gomock.Controller) *MockClusterSession {
	mock := &MockClusterSession{ctrl: ctrl}
	mock.recorder = &MockClusterSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterSession) EXPECT() *MockClusterSessionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClusterSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClusterSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClusterSession)(nil).Close))
}

// Open mocks base method.
func (m *MockClusterSession) Open() (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockClusterSessionMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockClusterSession)(nil).Open))
}
